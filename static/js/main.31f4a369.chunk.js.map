{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","getBadgeClass","classes","props","counter","value","formatCount","this","onClick","onIncreament","onDelete","id","Component","Counters","onReset","counters","map","key","App","state","handleIncreament","index","indexOf","setState","handleDelete","counterId","filter","c","handleReset","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mOAgBeA,EAdA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEhB,OADAC,QAAQC,IAAI,mBAEV,yBAAKC,UAAU,gCACb,uBAAGA,UAAU,eAAeC,KAAK,cAAjC,SAEE,0BAAMD,UAAU,oCACbH,MC0BIK,E,4MAXbC,cAAgB,WACd,IAAIC,EAAU,mBAEd,OADAA,GAAwC,IAA7B,EAAKC,MAAMC,QAAQC,MAAc,UAAY,W,EAI1DC,YAAc,WAAO,IACXD,EAAU,EAAKF,MAAMC,QAArBC,MACR,OAAiB,IAAVA,EAAc,OAASA,G,uDA7BtB,IAAD,OAEP,OADAT,QAAQC,IAAI,qBAEV,6BACE,0BAAMC,UAAWS,KAAKN,iBAAkBM,KAAKD,eAC7C,4BACEE,QAAS,kBAAM,EAAKL,MAAMM,aAAa,EAAKN,MAAMC,UAClDN,UAAU,+BAFZ,cAMA,4BACEU,QAAS,kBAAM,EAAKL,MAAMO,SAAS,EAAKP,MAAMC,QAAQO,KACtDb,UAAU,oCAFZ,e,GAZcc,aC6BPC,E,uKA3BH,IAAD,EAE6CN,KAAKJ,MAAlDW,EAFA,EAEAA,QAASC,EAFT,EAESA,SAAUL,EAFnB,EAEmBA,SAAUD,EAF7B,EAE6BA,aAIpC,OAFAb,QAAQC,IAAI,sBAGV,6BACE,4BACEC,UAAU,6BACVU,QAASM,GAFX,SAMCC,EAASC,KAAI,SAACZ,GAAD,OACZ,kBAAC,EAAD,CACEM,SAAUA,EACVD,aAAcA,EACdQ,IAAKb,EAAQO,GACbP,QAASA,Y,GApBEQ,aC6DRM,E,kDAlDb,aAAe,IAAD,8BACZ,gBAVFC,MAAQ,CACNJ,SAAU,CACR,CAAEJ,GAAI,EAAGN,MAAO,GAChB,CAAEM,GAAI,EAAGN,MAAO,GAChB,CAAEM,GAAI,EAAGN,MAAO,GAChB,CAAEM,GAAI,EAAGN,MAAO,KAIN,EASde,iBAAmB,SAAChB,GAClB,IAAMW,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BM,EAAQN,EAASO,QAAQlB,GAC/BW,EAASM,GAAT,eAAuBjB,GACvBW,EAASM,GAAOhB,QAChB,EAAKkB,SAAS,CAAER,cAdJ,EAiBdS,aAAe,SAACC,GACd,IAAMV,EAAW,EAAKI,MAAMJ,SAASW,QAAO,SAACC,GAAD,OAAOA,EAAEhB,KAAOc,KAC5D,EAAKF,SAAS,CAAER,cAnBJ,EAsBda,YAAc,WACZ,IAAMb,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAACZ,GAExC,OADAA,EAAQC,MAAQ,EACTD,KAET,EAAKmB,SAAS,CAAER,cAzBhBnB,QAAQC,IAAI,qBAFA,E,gEAMZD,QAAQC,IAAI,kB,+BA0BZ,OADAD,QAAQC,IAAI,kBAEV,kBAAC,IAAMgC,SAAP,KACE,kBAAC,EAAD,CACElC,cAAeY,KAAKY,MAAMJ,SAASW,QAAO,SAACC,GAAD,OAAOA,EAAEtB,MAAQ,KAAGyB,SAEhE,0BAAMhC,UAAU,aACd,kBAAC,EAAD,CACEiB,SAAUR,KAAKY,MAAMJ,SACrBD,QAASP,KAAKqB,YACdnB,aAAcF,KAAKa,iBACnBV,SAAUH,KAAKiB,qB,GApDTZ,aCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,a","file":"static/js/main.31f4a369.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst NavBar = ({ totalCounters }) => {\r\n  console.log('NavBar Rendered')\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"index.hmtl\">\r\n        Navbar\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    console.log(\"Counter- Rendered\");\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClass()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncreament(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm p5\"\r\n        >\r\n          Increament\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"button btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClass = () => {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  };\r\n\r\n  formatCount = () => {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"zero\" : value;\r\n  };\r\n}\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n\r\n    const {onReset, counters, onDelete, onIncreament} = this.props;\r\n\r\n    console.log(\"Counters- Rendered\");\r\n\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"btn btn-primary btn-sm m-2\"\r\n          onClick={onReset}\r\n        >\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            onDelete={onDelete}\r\n            onIncreament={onIncreament}\r\n            key={counter.id}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  constructor() {\n    super();\n    console.log(\"App - constructor\");\n  }\n\n  componentDidMount() {\n    console.log(\"App- Mounted\");\n  }\n\n  handleIncreament = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((counter) => {\n      counter.value = 0;\n      return counter;\n    });\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App - rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncreament={this.handleIncreament}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}